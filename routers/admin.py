"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from filters import is_admin
from keyboards.builders import get_admin_keyboard
from utils.storage_utils import (
    get_bot_stats, update_bot_stats, add_banned_user, 
    get_banned_users, add_broadcast_record, get_all_users
)
from utils.translator import t

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("admin"), is_admin)
async def cmd_admin(message: Message, lang: str = "ru"):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = message.from_user.id if message.from_user else 0
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(lang)
    )


@router.message(Command("stats"), is_admin)
async def cmd_stats(message: Message, lang: str = "ru"):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = message.from_user.id if message.from_user else 0
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ bot_storage
        stats = get_bot_stats()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å email)
        all_users = get_all_users()
        active_sessions = sum(1 for user_data in all_users.values() if user_data.get('email'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats['total_users'] = len(all_users)
        update_bot_stats(stats)
        
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats.get('total_users', 0)}
üìß <b>–°–æ–∑–¥–∞–Ω–æ email –∞–¥—Ä–µ—Å–æ–≤:</b> {stats.get('created_emails', 0)}
üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:</b> {active_sessions}
üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {len(get_banned_users())}

üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        await message.answer(stats_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("broadcast"), is_admin)
async def cmd_broadcast(message: Message, lang: str = "ru"):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id if message.from_user else 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not message.text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
        return
        
    text_parts = message.text.split(' ', 1)
    if len(text_parts) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    
    broadcast_text = text_parts[1]
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É: {broadcast_text[:50]}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = get_all_users()
        
        if not all_users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        sent_count = 0
        failed_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_id_str in all_users.keys():
            try:
                target_user_id = int(user_id_str)
                if message.bot:
                    await message.bot.send_message(target_user_id, broadcast_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
                failed_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        broadcast_record = {
            "date": datetime.now().isoformat(),
            "admin_id": user_id,
            "text": broadcast_text,
            "sent": sent_count,
            "failed": failed_count
        }
        add_broadcast_record(broadcast_record)
        
        result_text = f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}
‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> {failed_count}
üìù <b>–¢–µ–∫—Å—Ç:</b> {broadcast_text[:100]}{'...' if len(broadcast_text) > 100 else ''}"""
        
        await message.answer(result_text)
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {failed_count} –Ω–µ—É–¥–∞—á–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")


@router.message(Command("ban"), is_admin)
async def cmd_ban(message: Message, lang: str = "ru"):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    admin_id = message.from_user.id if message.from_user else 0
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not message.text:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
        return
        
    text_parts = message.text.split(' ', 1)
    if len(text_parts) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")
        return
    
    try:
        target_user_id = int(text_parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        banned_users = get_banned_users()
        if target_user_id in banned_users:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω-–ª–∏—Å—Ç
        success = add_banned_user(target_user_id)
        
        if success:
            await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            try:
                if message.bot:
                    await message.bot.send_message(
                        target_user_id,
                        "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                pass
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", is_admin)
async def handle_stats_button(message: Message, lang: str = "ru"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await cmd_stats(message, lang)


@router.message(F.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞", is_admin)
async def handle_broadcast_button(message: Message, lang: str = "ru"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await message.answer(
        "üì§ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/broadcast –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>"
    )


@router.message(F.text == "üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", is_admin)
async def handle_ban_button(message: Message, lang: str = "ru"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    await message.answer(
        "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/ban user_id</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/ban 123456789</code>"
    )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥", is_admin)
async def handle_back_button(message: Message, lang: str = "ru"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    from keyboards.builders import get_main_keyboard
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(lang)
    )
